require('dotenv').config();
const pool = require('./config/db');

async function setupStatusHistoryTable() {
  try {
    console.log('üîß Configuration de la table status_history...');
    
    // Cr√©ation de la table status_history
    const createTableQuery = `
      CREATE TABLE IF NOT EXISTS srmdb.status_history (
        id INT(11) PRIMARY KEY AUTO_INCREMENT,
        reclamation_id INT(11) NOT NULL,
        old_status ENUM('en attente', 'en cours', 'r√©solue', 'rejet√©e'),
        new_status ENUM('en attente', 'en cours', 'r√©solue', 'rejet√©e'),
        changed_by INT(11) NOT NULL,
        changed_at DATETIME NOT NULL,
        FOREIGN KEY (reclamation_id) REFERENCES srmdb.reclamations(id) ON DELETE CASCADE,
        FOREIGN KEY (changed_by) REFERENCES srmdb.users(id) ON DELETE CASCADE
      )
    `;
    
    await pool.query(createTableQuery);
    console.log('‚úÖ Table status_history cr√©√©e avec succ√®s');
    
    // Cr√©ation des index
    const indexes = [
      'CREATE INDEX IF NOT EXISTS idx_status_history_reclamation_id ON srmdb.status_history(reclamation_id)',
      'CREATE INDEX IF NOT EXISTS idx_status_history_changed_by ON srmdb.status_history(changed_by)',
      'CREATE INDEX IF NOT EXISTS idx_status_history_changed_at ON srmdb.status_history(changed_at)'
    ];
    
    for (const indexQuery of indexes) {
      try {
        await pool.query(indexQuery);
      } catch (error) {
        // Index might already exist, that's okay
        console.log('‚ÑπÔ∏è Index d√©j√† existant ou non n√©cessaire');
      }
    }
    
    console.log('‚úÖ Index cr√©√©s avec succ√®s');
    console.log('üéâ Configuration de la table status_history termin√©e!');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration:', error);
  } finally {
    process.exit(0);
  }
}

setupStatusHistoryTable();